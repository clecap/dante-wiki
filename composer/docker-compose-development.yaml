#
#  TODO: prepare connection to git for push upstream stuff !!!
#  TODO: use fresh and empty database volume from scratch !!
#  TODO: need to have local .git and git submodules for the correct treatment of git push upstream functionality
#
# 

# Start up database and webserver
# initialize webserver
# copy out to live


services:

## a database running on backing store which as a file is part of the container
  database:
    image: mariadb:10.5
    logging:
      driver: journald
    ports:
      - "3306:3306"
    container_name: dante-mariadb-container
    networks:
      - dante-network
    secrets:
     - configuration
    environment:
      MARIADB_ROOT_PASSWORD: initialPassword


## a database running on backing store which is a named volume, separate from the container
  database-volume:
    image: mariadb:10.5
    logging:
      driver: journald    
    ports:
      - "3306:3306"
    container_name: dante-mariadb-container
    networks:
      - dante-network
    secrets:
     - configuration
    volumes:
      - data:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: initialPassword


  copy-to-host:
    image: dante-wiki:latest
    logging:
      driver: journald    
    build: ../images/dante-wiki/src
    container_name: dante-copy-container
    restart: "no"
    volumes:
      - ../live:/mnt
    secrets:
      - configuration
    networks: 
      - dante-network
    command: "prepare-database.sh get-dante.sh get-parsifal.sh generate-mediawiki-private.sh init.sh copy-out.sh shutdown.sh"

# NOTE: we add a shutdown.sh for the copy-to-host service so that the webserver may start up
#       If we need to debug some stuff, we can also remove it for a moment 

# NOTE: wait for mysql not via health check but via script, since we want a more fine granular control over this
#       than seems to work with the docker healthcheck approach







# get dante and parsifal twice.
# once before generating the copy so that we have it in place before init.sh for the update scripts etc.
# a second time in webserver-after-copy, to be sure that we have the freshest version even when we did not redo the complete copy cycle

## todo: why do we need get-ante and get-parsifal twice??
## is the depends_on really working here or is it superfluous??
## TODO: http or https ?????????????????????????
  webserver-after-copy:
    environment:
      - COMPOSER_IDENTITY=webserver-after-copy
      - IMAGE_ID="${IMAGE_ID}"
      - IMAGE_DIGEST="${IMAGE_DIGEST}"
      - IMAGE_REPOSITORY="${IMAGE_REPOSITORY}"
      - IMAGE_CREATED_AT="${IMAGE_CREATED_AT}"
      - IMAGE_TAG="${IMAGE_TAG}"
    image: dante-wiki:latest
    hostname: ${MY_DOMAINNAME}      
    logging:
      driver: journald
    container_name: dante-wiki-container
    depends_on:
      copy-to-host:
        condition: service_completed_successfully
    volumes:
      - ../live:/var/www/html
    ports:
      - "8080:80"
      - "4443:443"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "install-webserver-certificate.sh get-dante.sh get-parsifal.sh generate-mediawiki-private.sh chown.sh set-user-preferences.sh initial-xml-git.sh run-apache-no-cache.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5


## webserver which runs /var/www/html on TOP_DIR/live for development purposes and directly initializes into this host-bound volume
  webserver-host:
    image: dante-wiki:latest
    logging:
      driver: journald    
    hostname: ${MY_DOMAINNAME}      
    container_name: dante-wiki-container
    volumes:
      - ../live-ext:/var/www/html
    ports:
      - "8080:80"
      - "4443:443"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "prepare-database.sh  install-webserver-certificate.sh get-dante.sh get-parsifal.sh generate-mediawiki-private.sh  init.sh  chown.sh set-user-preferences.sh initial-xml-git.sh run-apache-no-cache.sh"


## starts a container which has not been initialized but which does not require a copy to the development environment
## runs not off a volume but off the container itself
  webserver-raw-http:
    environment:
      - COMPOSER_IDENTITY=webserver-raw-http
    image: dante-wiki:latest
    hostname: ${MY_DOMAINNAME}      
    container_name: dante-wiki-container
    ports:
      - "${HOST_HTTP_PORT}:80"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "prepare-database.sh install-webserver-certificate.sh get-dante.sh get-parsifal.sh generate-mediawiki-private.sh init.sh set-user-preferences.sh initial-xml-git.sh run-apache-no-cache.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5



## starts a container which has not been initialized but which does not require a copy to the development environment
## runs not off a volume but off the container itself
  webserver-raw-https:
    environment:
      - COMPOSER_IDENTITY=webserver-raw-https
    image: dante-wiki:latest
    hostname: ${MY_DOMAINNAME}      
    container_name: dante-wiki-container
    ports:
      - "${HOST_HTTPS_PORT}:443"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "prepare-database.sh install-webserver-certificate.sh get-dante.sh get-parsifal.sh generate-mediawiki-private.sh init.sh set-user-preferences.sh initial-xml-git.sh run-apache-no-cache.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5





## starts a container and does all the work for preparing a 
  webserver-stemcell:
    environment:
      - COMPOSER_IDENTITY=webserver-stemcell
    image: dante-wiki:latest
    hostname: ${MY_DOMAINNAME}      
    container_name: dante-wiki-container
    ports:
      - "8080:80"
      - "4443:443"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "prepare-database.sh install-webserver-certificate.sh get-dante.sh get-parsifal.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5



## start a container which has already been initialized
  webserver-cooked:
    environment:
      - COMPOSER_IDENTITY=webserver-cooked
    image: dante-wiki:cooked
    hostname: ${MY_DOMAINNAME}      
    container_name: dante-wiki-container
    ports:
      - "8080:80"
      - "4443:443"
    secrets:
      - configuration
    networks: 
      dante-network:
        aliases: 
          - dante.local
    command: "prepare-database.sh restore-initial-sql.sh chown.sh run-apache-no-cache.sh"

# TODO: waiting for mysql: maybe we can put this into a health check ?!?!? in a better way than thus far ????


  phpmyadmin:
    image: phpmyadmin:5.2.1
    ports: 
      - "9090:80"
    container_name: php-myadmin-container
    networks: 
      dante-network:
        aliases:
          - phpmyadmin.local
    environment:
      PMA_HOST: dante-mariadb-container
    depends_on:
      - database

networks:
  dante-network:

volumes:
  data:
    external: true
  live-ext:
    external: true

secrets:
  configuration:
    file: ../private/configuration.sh